@{
	ViewData["Title"] = "Razor";
}
@* @{}的大括號內是Razor語法寫程式碼的地方 *@

<h1>Razor語法教學</h1>
@{
	string message = "這是Razor語法的範例";
	// 先定義資料型態，再宣告變數，最後賦值 => 以前都要這樣寫
	var age = 25;
	/*
	比較新的版本的開始，可以不用先定義資料型態，而是直接用var宣告變數
	並且利用初始化來決定這個變數的資料型態，一旦初始化決定變數資料型態後
	，這個變數的資料型態就不能被改變
	*/
	// age = "40"; => 這樣就不可以，因為age在初始化的時候已經被決定是int資料型態了

	int Math = 85, Eng = 90; // 一次宣告多個變數，用逗點隔開
	bool flag = true;

	/*
	Razor輸出至瀏覽器的語法 :
	1. @:後面的這行會直接輸出至瀏覽器
	2. @後面接變數名稱或表達式，會輸出變數的值
	*/
	@:This lesson is for @message
	// Razor語法也可以直接寫HTML標籤
	<p>我的年齡是 @age 歲</p>

	// 變數運算 :
	@:@Math + @Eng = @(Math + Eng)

	@if (!flag) // flag變數是true
	{
		<h3>歡迎登入本系統</h3>
	}
	else
	{
		<h3>登入有誤</h3>
	}
}

@{
	string[] nm = { "夜市一", "夜市二", "夜市三", "夜市四", "夜市五", "夜市六", "夜市七" };
	/*
	程式碼說明 :
	1. string[]在C#中代表是字串陣列，可以存放多個字串資料的集合
	2. nm是宣告的變數名稱，裡面的值是字串陣列的資料集合
	補充 : 一個陣列只能存放一種資料型態的資料，所以定義資料型態很重要
		，但也可以利用物件( object )資料型態來存放不同資料型態的資料，只是比較多限制
	*/
}

<div class="col-3">
	<ul class="list-group">
		@foreach (var item in nm) // 如果不知道資料型態可以直接用var
		/*
		程式碼說明 :
		1. 迴圈的寫法可以用foreach跟for兩種方式
		2. 如果不知道資料型態可以直接用var來協助定義資料型態
		3. 宣告一個變數item( 自訂 )，然後依序取得nm陣列中的資料，並賦值給item
		*/
		{
			<li class="list-group-item">夜市名稱 : @item</li>
		}
	</ul>
</div>


